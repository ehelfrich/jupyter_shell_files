#! /bin/bash

## Functions

start_tunnel()
{
	#Start tunnel logic'
	SSHPID=$(pgrep -f 'ssh -q -f <user>@$target -L 22222:localhost:22222 -N')
	echo "Connecting to $target and launching notebook" 
}

start_notebook()
{
	#Remote Script checks for already running notebook and does not start second
	ssh -t -q <user>@$target "/home/<user>/scripts/start_jupyter.sh" &
	echo "Remote notebook started on $target" 
	sleep 2

	echo "Enabling SSH port forwarding" 
	sleep 1
	if [[ $SSHPID == "" ]]; then
		ssh -q -f <user>@$target -L 22222:localhost:22222 -N &
	else
		echo "Tunnel Already Created"
	fi
}

stop_tunnel()
{
	PID=$(pgrep -f "ssh -q -f <user>@$target -L 22222:localhost:22222 -N")
	i=1
	echo "Stopping SSH port forwarding"
	sleep 1

	if [[ $PID != "" ]]; then
		while [[ $PID != "" && $i < 3 ]]; do
			echo "Attempt: " && echo $i
	 		echo "Running: " && echo $PID
			echo "Attempting to Killing PID"
			sleep 1
			pkill -f "ssh -q -f <user>@$target -L 22222:localhost:22222 -N"
			sleep 1
			((++i))
			PID=$(pgrep -f "ssh -q -f <user>@$target -L 22222:localhost:22222 -N")
		done

		if [ $i -ge 3 ]; then
			echo "*****Kill attempts on SSH PID Failed****"
			echo "*************Exiting Script*************"
			exit 2
		fi

	else
		echo "SSH Tunnel PID not running"
	fi 

	if [[ $i > 1 ]]; then
		echo "Kill attempt successful"
	fi
}

stop_notebook()
{
	#Stop Remote Notebook Logic
	PID=$(pgrep -f "ssh -q -f <user>@$target -L 22222:localhost:22222 -N")
	i=1

	echo "Stopping Remote Notebook and SSH Tunnel"
	sleep 1
	ssh <user>@$target "bash /home/<user>/scripts/stop_jupyter.sh" &
	echo "Notebook Killed"
}

usage()
{
	echo "usage: remote-jupyter [[[-t target (.local.lan) ] [-a action]] | [-h]]"
}

######## Main

## Parameters

while [ "$1" != "" ]; do 
	case "$1" in
		-t | --target )		shift
							target=$1
							;;
		-a | --action ) 	shift
							action=$1
							;;
		-h | --help )		usage
							exit
							;;
		* )					usage
							exit 1
	esac
	shift
done

## Append Domain to target if needed

if [[ ! "$target" =~ (\.local\.lan) ]]; then
	target="$target.local.lan"
fi


## Actions

if [ "$action" == 'start' ] ; then
	start_tunnel
	sleep 2
	start_notebook
	echo "Notebook available at localhost:22222/tree or localhost:22222/lab"
	exit

elif [ "$action" == 'stop' ] ; then
	stop_notebook
	stop_tunnel
	exit
	
else 
	echo "Please provide an action paramter using -a <start/stop>"
	exit
fi